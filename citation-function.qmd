---
title: "Quarto Recommended Citation"
author:
  - name:
      given: Jan
      family: van der Merwe
  - name:
      given: Joe B.C. 
      family: Bloggs
  - name:
      given: Mike S.
      family: Cardona Santos
date: last-modified
citation:
  type: webpage
  container-title: National Biodiversity Assessment 2025
  publisher: South African National Biodiversity Institute
  url: http://nba.sanbi.org.za/
appendix-cite-as: display
format: html
---

## Code block for generating citation string

This function is basically just composing the citation string. One still has to tell Quarto to fetch the yaml metadata to build the actual citation. The code for fetching the yaml metadata only runs when the document is rendered. Therefore I think it is better to have it outside the function.

The function cannot handle the different ways in which author names can be captured in yml. Essentially, you have to use this format:

### yml header in .qmd
```{yaml}
#| echo: true
#| eval: false

author:
  - name:
      given: 
      family:
```

### R code for function

```{r}
#| echo: true
#| eval: true
#| message: false
#| warning: false
#| include: true
#| label: lst-function
# 
# 
# nba_citation <- function(meta){
# 
# # 1. ----------- Author string ----------------------------------------------
# # helper: turn "Jo M."  -> "J.M."
# initials <- function(given) {
#   # split on spaces or dots, drop empties, keep first letter, add a dot
#   parts <- unlist(strsplit(given, "[[:space:].]+"))
#   paste0(substring(parts, 1, 1), collapse = ".") |> paste0(".")
# }
# 
# authors <- vapply(meta$author, function(a) {
#   fam  <- a$name$family
#   fam  <- sub("^(.)(.*)$", "\\U\\1\\E\\2", fam, perl = TRUE)  # cap first letter only
#   inits <- initials(a$name$given)
#   paste0(fam, ", ", inits)
# }, FUN.VALUE = character(1))
# 
# if (length(authors) == 1) {
#   author_str <- authors
# } else if (length(authors) == 2) {
#   author_str <- paste(authors, collapse = " & ")
# } else {
#   author_str <- paste(
#     paste(authors[-length(authors)], collapse = ", "),
#     authors[length(authors)],
#     sep = if (length(authors) > 2) ", & " else " & "
#   )
# }
# 
# #--- 2. year ---------------------------------------------------------
# if (identical(meta$date, "last-modified")) {
#   # take the fileâ€™s modification time (UTC) and pull the year
#   file_time <- file.info(knitr::current_input())$mtime
#   yr <- format(as.Date(file_time), "%Y")
# } else {
#   yr <- format(as.Date(meta$date), "%Y")
# }
# 
# # 3. ----------- Remaining pieces -----------------------------------------
# title     <- meta$title
# container <- meta$citation$`container-title`
# publisher <- meta$citation$publisher
# url       <- meta$citation$url
# 
# # 4. ----------- Stitch the citation together -----------------------------
# cat(paste0(
#   author_str, " ", yr, ". ", title, ". ",
#   container, ". ", publisher, ". ", url, ".\n\n"
# ))
# 
# }

```

## Code block for generating citation (this gets added to the Quarto template)

### Recommended citation

```{r}
#| echo: true
#| eval: true
#| output: asis
#| message: false
#| warning: false
#| include: true
#| label: lst-citation-code

library(nbaR) # If we put it in the package
library(knitr)
library(rmarkdown)

# Code for fetching the yaml metadata
# Note that this only runs when the .qmd file is rendered, therefore the outputs of this code block will return no results if you try to run it within R - that does not mean it is not working

meta <- knitr::opts_knit$get("rmarkdown.pandoc.to")  # forces knitr to load metadata
meta <- rmarkdown::metadata  # full YAML is now in `meta`

nbaR::nba_citation(meta)

```

### In comparison, this is what the auto-generated citation looks like, using Quarto's default csl
