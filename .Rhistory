require(tidyverse)
require(sf)
library(readr)
## subset the data
ecoAttr_2023_sub <- ecoAttr_2023_upd %>%
select(Ecosystem_functional_type, Percent_protected, Threat_status_2023)
## round values in 'percent protected' column to 2 decimal places
ecoAttr_2023_new <- ecoAttr_2023_sub %>% mutate(across(c('Percent_protected'), round, 2))
## order the data from lowest protection to highest threat status levels
ecoAttr_2023_new$Threat_status_2023 <- factor(ecoAttr_2023_new$Threat_status_2023,
levels = c("Least Concern", "Near Threatened",
"Vulnerable", "Endangered", "Critically Endangered"))
## summarise the data
summary_data <- ecoAttr_2023_new %>%
group_by(Ecosystem_functional_type, Threat_status_2023) %>%
summarize(count = n(), ## calculate frequency totals
percent = sum(Percent_protected)) %>% ## calculate the total percentages
mutate(percent = percent / sum(percent) * 100)  ## calculate percentage
thr_plot <- ggplot(summary_data, aes(y = percent, x = Ecosystem_functional_type, fill = Threat_status_2023)) +
geom_bar(stat = "identity", width = 0.5) + ## change width of bars
geom_text(aes(label = count), position = position_stack(vjust = 0.5), ## add count labels to the stacked bars and adjust the "vjust" value to place text at the beginning, centre or end of bars
size = 3, color = "black", show.legend = FALSE) + ## adjust size of labels with no legend being shown
scale_fill_manual(values = c("#b1d798", "#eeeea3", "#fff02a", "#f97835", "#e9302c")) +  ## order the colours of the bars in the reversed order
ylab("Percent protected (%)") +
xlab("") + ## remove the heading for the y-axis
guides(fill = guide_legend(reverse = TRUE)) +
labs(fill = "Threat Status") + ## change the legend title here
theme_bw() + ## create a black bounding box around the plot
theme(legend.position = "bottom") + ## position the legend to beneath the plot
coord_flip()  ## flip the orientation of the chart
#####################################################################################
### Prepare the data
ecoAttr_2023_upd <- read_csv("outputs/tbl_ecoAttr_2023_updated.csv")
#####################################################################################
### Prepare the data
ecoAttr_2023_upd <- read_csv("./outputs/tbl_ecoAttr_2023_updated.csv")
#####################################################################################
### Prepare the data
ecoAttr_2023_upd <- read_csv("data/tbl_ecoAttr_2023_updated.csv")
View(ecoAttr_2023_upd)
## subset the data
ecoAttr_2023_sub <- ecoAttr_2023_upd %>%
select(Ecosystem_functional_type, Percent_protected, Threat_status_2023)
## round values in 'percent protected' column to 2 decimal places
ecoAttr_2023_new <- ecoAttr_2023_sub %>% mutate(across(c('Percent_protected'), round, 2))
## order the data from lowest protection to highest threat status levels
ecoAttr_2023_new$Threat_status_2023 <- factor(ecoAttr_2023_new$Threat_status_2023,
levels = c("Least Concern", "Near Threatened",
"Vulnerable", "Endangered", "Critically Endangered"))
## summarise the data
summary_data <- ecoAttr_2023_new %>%
group_by(Ecosystem_functional_type, Threat_status_2023) %>%
summarize(count = n(), ## calculate frequency totals
percent = sum(Percent_protected)) %>% ## calculate the total percentages
mutate(percent = percent / sum(percent) * 100)  ## calculate percentage
thr_plot <- ggplot(summary_data, aes(y = percent, x = Ecosystem_functional_type, fill = Threat_status_2023)) +
geom_bar(stat = "identity", width = 0.5) + ## change width of bars
geom_text(aes(label = count), position = position_stack(vjust = 0.5), ## add count labels to the stacked bars and adjust the "vjust" value to place text at the beginning, centre or end of bars
size = 3, color = "black", show.legend = FALSE) + ## adjust size of labels with no legend being shown
scale_fill_manual(values = c("#b1d798", "#eeeea3", "#fff02a", "#f97835", "#e9302c")) +  ## order the colours of the bars in the reversed order
ylab("Percent protected (%)") +
xlab("") + ## remove the heading for the y-axis
guides(fill = guide_legend(reverse = TRUE)) +
labs(fill = "Threat Status") + ## change the legend title here
theme_bw() + ## create a black bounding box around the plot
theme(legend.position = "bottom") + ## position the legend to beneath the plot
coord_flip()  ## flip the orientation of the chart
## Purpose of script: To create the  protection level stacked bar diagram for the ecosystem functional groups
##
## Author: Lauryn Bull
##
## Date Created: 2024-04-09
##
## Notes:
##
#####################################################################################
### Load libraries
library(tidyverse)
library(sf)
#####################################################################################
### Load the data
ecoAttr_2023_upd <- read_csv("outputs/tbl_ecoAttr_2023_updated.csv")
names(ecoAttr_2023_upd)
## subset the data
ecoAttr_2023_sub <- ecoAttr_2023_upd %>%
select(Ecosystem_functional_type, Percent_protected, Threat_status_2023)
## round values in 'percent protected' column to 2 decimal places
ecoAttr_2023_new <- ecoAttr_2023_sub %>% mutate(across(c('Percent_protected'), round, 2))
## order the data from lowest protection to highest threat status levels
ecoAttr_2023_new$Threat_status_2023 <- factor(ecoAttr_2023_new$Threat_status_2023,
levels = c("Least Concern", "Near Threatened",
"Vulnerable", "Endangered", "Critically Endangered"))
## summarise the data
summary_data <- ecoAttr_2023_new %>%
group_by(Ecosystem_functional_type, Threat_status_2023) %>%
summarize(count = n(), ## calculate frequency totals
percent = sum(Percent_protected)) %>% ## calculate the total percentages
mutate(percent = percent / sum(percent) * 100)  ## calculate percentage
#####################################################################################
### Load the data
ecoAttr_2023_upd <- read_csv("data/tbl_ecoAttr_2023_updated.csv")
names(ecoAttr_2023_upd)
## subset the data
ecoAttr_2023_sub <- ecoAttr_2023_upd %>%
select(Ecosystem_functional_type, Percent_protected, Threat_status_2023)
## round values in 'percent protected' column to 2 decimal places
ecoAttr_2023_new <- ecoAttr_2023_sub %>% mutate(across(c('Percent_protected'), round, 2))
## order the data from lowest protection to highest threat status levels
ecoAttr_2023_new$Threat_status_2023 <- factor(ecoAttr_2023_new$Threat_status_2023,
levels = c("Least Concern", "Near Threatened",
"Vulnerable", "Endangered", "Critically Endangered"))
## summarise the data
summary_data <- ecoAttr_2023_new %>%
group_by(Ecosystem_functional_type, Threat_status_2023) %>%
summarize(count = n(), ## calculate frequency totals
percent = sum(Percent_protected)) %>% ## calculate the total percentages
mutate(percent = percent / sum(percent) * 100)  ## calculate percentage
thr_plot <- ggplot(summary_data, aes(y = percent, x = Ecosystem_functional_type, fill = Threat_status_2023)) +
geom_bar(stat = "identity", width = 0.5) + ## change width of bars
geom_text(aes(label = count), position = position_stack(vjust = 0.5), ## add count labels to the stacked bars and adjust the "vjust" value to place text at the beginning, centre or end of bars
size = 3, color = "black", show.legend = FALSE) + ## adjust size of labels with no legend being shown
scale_fill_manual(values = c("#b1d798", "#eeeea3", "#fff02a", "#f97835", "#e9302c")) +  ## order the colours of the bars in the reversed order
ylab("Percent protected (%)") +
xlab("") + ## remove the heading for the y-axis
guides(fill = guide_legend(reverse = TRUE)) +
labs(fill = "Threat Status") + ## change the legend title here
theme_bw() + ## create a black bounding box around the plot
theme(legend.position = "bottom") + ## position the legend to beneath the plot
coord_flip()  ## flip the orientation of the chart
thr_plot
threat_status_donut_plot <- function(DAT, X, Y, FILL ) {
thr_plot <- ggplot(DAT, aes(y = Y, x = X, FILL)) +
geom_bar(stat = "identity", width = 0.5) + ## change width of bars
geom_text(aes(label = count), position = position_stack(vjust = 0.5), ## add count labels to the stacked bars and adjust the "vjust" value to place text at the beginning, centre or end of bars
size = 3, color = "black", show.legend = FALSE) + ## adjust size of labels with no legend being shown
scale_fill_manual(values = c("#b1d798", "#eeeea3", "#fff02a", "#f97835", "#e9302c")) +  ## order the colours of the bars in the reversed order
ylab("Ecosystem Functional Group percent protection") +
xlab("") + ## remove the heading for the y-axis
guides(fill = guide_legend(reverse = TRUE)) +
labs(fill = "") + ## change the legend title here
theme_bw() + ## create a black bounding box around the plot
theme(legend.position = "bottom") + ## position the legend to beneath the plot
coord_flip()  ## flip the orientation of the chart
thr_plot
}
thr_plot <- ggplot(DAT, aes(y = Y, x = X, FILL)) +
geom_bar(stat = "identity", width = 0.5) + ## change width of bars
geom_text(aes(label = count), position = position_stack(vjust = 0.5), ## add count labels to the stacked bars and adjust the "vjust" value to place text at the beginning, centre or end of bars
size = 3, color = "black", show.legend = FALSE) + ## adjust size of labels with no legend being shown
scale_fill_manual(values = c("#b1d798", "#eeeea3", "#fff02a", "#f97835", "#e9302c")) +  ## order the colours of the bars in the reversed order
ylab("Ecosystem Functional Group percent protection") +
xlab("") + ## remove the heading for the y-axis
guides(fill = guide_legend(reverse = TRUE)) +
labs(fill = "") + ## change the legend title here
theme_bw() + ## create a black bounding box around the plot
theme(legend.position = "bottom") + ## position the legend to beneath the plot
coord_flip()  ## flip the orientation of the chart
threat_status_donut_plot <- function(DAT, X, Y, FILL ) {
thr_plot <- ggplot(DAT, aes(y = Y, x = X, FILL)) +
geom_bar(stat = "identity", width = 0.5) + ## change width of bars
geom_text(aes(label = count), position = position_stack(vjust = 0.5), ## add count labels to the stacked bars and adjust the "vjust" value to place text at the beginning, centre or end of bars
size = 3, color = "black", show.legend = FALSE) + ## adjust size of labels with no legend being shown
scale_fill_manual(values = c("#b1d798", "#eeeea3", "#fff02a", "#f97835", "#e9302c")) +  ## order the colours of the bars in the reversed order
ylab("Ecosystem Functional Group percent protection") +
xlab("") + ## remove the heading for the y-axis
guides(fill = guide_legend(reverse = TRUE)) +
labs(fill = "") + ## change the legend title here
theme_bw() + ## create a black bounding box around the plot
theme(legend.position = "bottom") + ## position the legend to beneath the plot
coord_flip()  ## flip the orientation of the chart
thr_plot
}
View(summary_data)
threat_status_donut_plot(summary_data, Ecosystem_functional_type, percent)
View(summary_data)
threat_status_donut_plot(summary_data, X= Ecosystem_functional_type, Y= percent)
View(summary_data)
threat_status_donut_plot(summary_data, percent, Ecosystem_functional_type)
library(readxl)
library(readr)
library(plyr)
library(tidyr)
library(foreign) ## for importing the Stata v12 dataset
library(dplyr)
library(tidyverse) ## has drop_na() function
library(ggplot2)
library(scales) ## percent function
library(kableExtra) ## display table formatting
#####################################################################################
### load data
tbl_ecoAttr_2023_updated <- read_csv("data/tbl_ecoAttr_2023_updated.csv")
View(tbl_ecoAttr_2023_updated)
ecoAttr_new <- ecoAttr %>%
select(Ecosystem_functional_type,
Threat_status_2023)
#####################################################################################
### load data
ecoAttr <- read_csv("data/tbl_ecoAttr_2023_updated.csv")
View(ecoAttr)
#####################################################################################
### create a new data frame called freq and calculate the percentages for the categorical data
freq_df <- as.data.frame(count(ecoAttr_new, Threat_status_2023))
#####################################################################################
### create a subset data frame with the selected columns
ecoAttr_new <- ecoAttr %>%
select(Ecosystem_functional_type,
Threat_status_2023)
#####################################################################################
### create a new data frame called freq and calculate the percentages for the categorical data
freq_df <- as.data.frame(count(ecoAttr_new, Threat_status_2023))
View(ecoAttr_new)
